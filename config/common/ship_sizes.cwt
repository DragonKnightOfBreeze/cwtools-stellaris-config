types = {
	type[ship_size] = {
		path = "game/common/ship_sizes"
		file_extension = .txt
		subtype[station] = {
			is_space_station = yes
		}
		subtype[ship] = {
			## cardinality = 0..1
			is_space_station = no
		}
		subtype[space_fauna] = {
			is_space_fauna_ship = yes
		}
		subtype[starbase] = {
			class = shipclass_starbase
		}
		subtype[designable] = {
			## cardinality = 0..1
			is_designable = yes
		}
		subtype[bio_ship] = {
			# is_bio_ship = yes
			is_bio_ship = bool # compatible with fallen empire bio ships
		}
		subtype[hero_ship] = {
			is_hero_ship = yes
		}
		localisation = {
			name = "$"
			plural = "$_plural"
		}
	}
}


ship_size = {

	## cardinality = 0..2
	graphical_culture = {
		## cardinality = 1..inf
		<graphical_culture>
	}
	## cardinality = 0..2
	graphical_culture = bool
	## cardinality = 0..1
	is_space_object = bool
	## cardinality = 0..1
	scales_with_planet = bool
	## cardinality = 0..1
	can_be_inspected = bool
	## cardinality = 0..1
	pre_communications_name = localisation
	## cardinality = 0..1
	entity = <model_entity>
	## cardinality = 0..1
	### reference to other ship_sizes + _entity, handled by manual validator
	entity = scalar
	### Used to filter ships sizes for graphical cultures
	## cardinality = 0..1
	ship_category = <ship_categories>
	## cardinality = 0..1
	formation_priority = int
	## cardinality = 0..1
	max_speed = float
	## cardinality = 0..1
	acceleration = float
	## cardinality = 0..1
	rotation_speed = float
	## cardinality = 0..1
	collision_radius = float
	## cardinality = 0..1
	max_hitpoints = int
	## cardinality = 0..1
	is_listed = bool
	## cardinality = 0..1
	components_add_to_cost = bool
	## cardinality = 0..1
	is_designable = bool
	### default: no?
	## cardinality = 0..1
	never_mia = bool
	## cardinality = 0..1
	### may be deprecated, tell Dayshine and Caligula if yes
	build_time = int
	## cardinality = 0..1
	is_civilian = bool
	### default: no
	## cardinality = 0..1
	cloaking_forbidden = bool
	## cardinality = 0..1
	build_block_radius = int
	## cardinality = 0..1
	can_disable = bool
	subtype[starbase] = {
		## cardinality = 0..1
		## replace_scopes = { this = starbase root = starbase }
		modifier = single_alias_right[modifier_clause]
		## cardinality = 0..1
		icon_frame = int
	}
	subtype[!starbase] = {
		## cardinality = 0..1
		## replace_scopes = { this = ship root = ship }
		modifier = single_alias_right[modifier_clause]
	}
	## cardinality = 0..1
	## replace_scopes = { this = ship root = ship }
	ship_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	size_multiplier = float
	## cardinality = 0..1
	hull_scale = float
	## cardinality = 0..1
	fleet_slot_size = int
	## cardinality = 0..1
	section_slots = {
		## cardinality = 1..inf
		scalar = { #this is connected to the section templates and global ship designs files!
			## cardinality = 1..inf
			locator = enum[model_locator] # this is connected to the ship asset files.
			## cardinality = 1..inf
			locator = scalar # TODO: Some locators are in .mesh files, so are missed by the enum
		}
	}
	## cardinality = 0..1
	### Determines sprites. ship_size_military_1 is default. The following sprite keys are generated from it: GFX_text_<key>, GFX_<key>, GFX_<key>_top, GFX_<key>_top_damaged
	icon = scalar
	## cardinality = 0..1
	### Determines sprites. ship_size_military_1 is default. The following sprite keys are generated from it: GFX_text_<key>, GFX_<key>, GFX_<key>_top, GFX_<key>_top_damaged
	icon_cloned = scalar
	## cardinality = 0..1
	use_shipnames_from = <ship_size>
	## cardinality = 0..1
	combat_size_multiplier = int
	## cardinality = 0..1
	num_target_locators = int
	## cardinality = 0..1
	is_space_station = bool
	## cardinality = 0..1
	icon_frame = int
	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	can_have_federation_design = bool
	## cardinality = 0..1
	enable_default_design = bool
	## cardinality = 0..1
	enable_3dview_in_ship_browser = bool
	## cardinality = 0..1
	selectable = single_alias_right[trigger_clause]
	## cardinality = 0..1
	default_behavior = <ship_behavior>
	## cardinality = 0..1
	ship_roles = {
		## cardinality = 0..inf
		enum[component_tag]
	}
	## cardinality = 0..1
	triggered_ship_roles = {
		## cardinality = 0..inf
		{
			name = enum[component_tag]
			trigger = single_alias_right[trigger_clause]
		}
	}
	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}
	#this is where ship classes are defined! this is important for other files, and it also causes the game to auto generate modifiers for each shipclass!
	class = enum[ship_class]
	## cardinality = 0..1
	construction_type = value_set[construction_type]
	## cardinality = 0..1
	construction_type = {
		## cardinality = 0..inf
		value_set[construction_type]
	}
	## cardinality = 0..1
	## replace_scopes = { root = starbase this = starbase }
	possible_starbase = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { root = starbase this = starbase }
	potential_starbase = single_alias_right[trigger_clause]
	## cardinality = 0..inf
	required_component_set = <component_set.required_component> #this is linked to required components defined as such under component_sets, and is also linked to global_ship_designs!
	## cardinality = 0..1
	valid_target_aggressive_stance = bool
	## cardinality = 0..1
	auto_upgrade = bool
	## cardinality = 0..1
	ship_class_icon_frame = int
	## cardinality = 0..1
	uses_name_prefix = bool
	## cardinality = 0..1
	is_space_fauna_ship = bool
	### default: no?
	## cardinality = 0..1
	is_reanimated = bool

	subtype[space_fauna] = {
		## cardinality = ~1..1
		ship_category = <ship_categories>
		## cardinality = ~1..1
		mutation_components_size = enum[mutation_components_size]
		## cardinality = ~1..1
		space_fauna_values = {
			## cardinality = 0..1
			age_threshold = {
				## cardinality = 0..1
				min = int
				## cardinality = 0..1
				max = int
			}
			## cardinality = 0..inf
			culling_value = {
				category = <economic_category>
				alias_name[economic_template] = alias_match_left[economic_template]
			}
			## cardinality = 0..1
			monthly_initial_breeding_chance = int
			## cardinality = 0..1
			monthly_increased_breeding_chance = int
			## cardinality = 0..1
			breeding_cooldown_months = int
			## cardinality = 0..1
			merge_with_individuals_amount_to_upgrade = int
			## cardinality = 0..1
			reanimated_ship_design = <global_ship_design>
			### default: no
			## cardinality = 0..1
			can_breed_alone = bool
			## cardinality = 1..1
			icon_frame = int

		}
	}

	## cardinality = 0..1
	takes_name_from_ship_design = bool
	## cardinality = 0..1
	flip_control_on_disable = bool
	## cardinality = 0..1
	combat_disengage_chance = float
	## cardinality = 0..1
	### if yes, ship design will have a 3d view in the ship browser
	enable_3dview_in_ship_browser = yes
	## cardinality = 0..1
	## replace_scopes = { root = country this = country }
	potential_country = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { root = country this = country }
	possible_country = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { root = planet this = planet }
	potential_planet = single_alias_right[trigger_clause]
	## cardinality = 0..1
	## replace_scopes = { root = planet this = planet }
	possible_planet = single_alias_right[trigger_clause]

	## cardinality = 0..1
	## replace_scopes = { root = any this = any }
	potential_construction = single_alias_right[trigger_clause]

	## cardinality = 0..1
	## replace_scopes = { root = any this = any }
	possible_construction = single_alias_right[trigger_clause]

	## cardinality = 0..inf
	resources = {
		## cardinality = 0..1
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	min_upgrade_cost = {
		## cardinality = 1..inf
		<resource> = float
	}

	### Removes the chance for the ship size to instantly get killed by emergency ftl. It can still be killed by the random Emergency FTL damage effect.
	## cardinality = 0..1
	never_lost = bool

	## cardinality = 0..1
	ai_ship_data = {
		## cardinality = 0..1
		min = int_value_field
		## cardinality = 0..1
		max = int_value_field
		## cardinality = 0..1
		system_mult = value_field
		## cardinality = 0..1
		planet_mult = value_field
		## cardinality = 0..1
		## replace_scopes = { this = country root = country }
		fraction = {
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}
		## cardinality = 0..1
		## replace_scopes = { this = country root = country }
		fraction = float
	}

	## cardinality = 0..1
	available_to_everyone = bool

	## cardinality = 0..1
	role_background = <sprite>

	## cardinality = 0..1
	on_click_sound = <sound_effect>

	## cardinality = 0..1
	map_icon_override = {
		## cardinality = 0..1
		normal = <sprite>
		## cardinality = 0..1
		mixed = <sprite>
		## cardinality = 0..1
		cloaked = <sprite>
	}

	## cardinality = 0..1
	custom_state_loc_prefix = localisation

	## cardinality = 0..1
	is_bio_ship = bool

	subtype[bio_ship] = {
		## cardinality = 0..1
		ship_family_name = localisation
		## cardinality = 0..1
		growth_stage_descriptor  = localisation
		evaluation_resource = <resource>
		## cardinality = 0..1
		bioship_growth_progress_required = int
		## cardinality = 0..1
		upgrades_to = <ship_size>
	}

	## cardinality = 0..1
	is_hero_ship = bool

	subtype[hero_ship] = {
		## cardinality = 0..1
		hero_ship_fleet_background = <sprite>
	}

}

#enums = { #you can change, mod, remove and add new shipclasses. This is not an enum!
#	enum[ship_class] = {
#		shipclass_military
#		shipclass_military_station
#		shipclass_military_special
#		shipclass_mining_station
#		shipclass_research_station
#		shipclass_terraform_station
#		shipclass_observation_station
#		shipclass_outpost_station
#		shipclass_orbital_station
#		shipclass_transport
#		shipclass_starbase
#		shipclass_constructor
#		shipclass_colonizer
#		shipclass_science_ship
#	}
#}

#ship_class = {
#	name = key #i dunno how to do this, but a shipclass entry is a must.
#}

enums = {
	complex_enum[ship_class] = {
		path = "game/common/ship_sizes"
		name = {
			class = enum_name
		}
	}
	complex_enum[section_slot] = {
		path = "game/common/ship_sizes"
		name = {
			section_slots = {
				enum_name = {
				}
			}
		}
	}
}

