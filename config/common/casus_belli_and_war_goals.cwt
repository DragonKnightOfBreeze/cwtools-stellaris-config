types = {
	type[casus_belli] = {
		path = "game/common/casus_belli"
		file_extension = .txt
		localisation = {
			name = "casus_belli_$"
			## optional
			hint = "casus_belli_$_acquire_hint"
		}
	}
	type[war_goal] = {
		path = "game/common/war_goals"
		localisation = {
			name = "war_goal_$"
			desc = "war_goal_$_desc"
		}
	}
}

enums = {
	enum[cede_claim] = {
		yes
		occupied_only
		no
	}
	enum[peace_offer] = {
		status_quo
		surrender
		demand_surrender
	}
}

casus_belli = {
	### trigger to make some CBs invalid for certain types of countries; \
	### this = attacker (CB owner); default: { always = yes }
	## cardinality = 0..1
	## replace_scopes = { this = country root = country }
	potential = single_alias_right[trigger_clause]

	### trigger, evaluated daily to check if CB should be created or destroyed automatically, does not affect CBs granted via script; \
	### this = attacker (CB owner), from = defender (target country); default: { always = yes }
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	is_valid = single_alias_right[trigger_clause]

	### trigger, evaluated daily to destroy CBs that have been granted via script ahead of expiration date; \
	### this = attacker (CB owner), from = defender (target country); default: { always = no }
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	destroy_if = single_alias_right[trigger_clause]

	### optional (default = yes), flag to control whether this CB will generate a notification (to avoid duplicate \
	### notification when a claim CB is generated).
	### Caligula's note: Always used in Vanilla (even when yes), so marked as obligatory unless someone knows better
	show_notification = bool

	###Cost when this CB is selected for a Proxy War. Paid by the war's instigator
	## cardinality = 0..inf
	proxy_war_resources = {
		## cardinality = 0..1
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	###Effect executed when a Proxy War is validated.
	### this = country who casus belli
	###from = proxy war instigator
	## replace_scopes = { this = country from = country }
	## cardinality = 0..1
	on_proxy_war_start = single_alias_right[effect_clause]

	## cardinality = 0..1
	show_in_diplomacy = bool

	## cardinality = 0..1
	aggregated_message_key = localisation
}

war_goal = {
	casus_belli = <casus_belli>

	### Cede claims on peace? Yes by default (I think - Caligula)
	## cardinality = 0..1
	cede_claims = enum[cede_claim]
	### Defenders get this war goal if no war goal is picked in time. If multiple war goals are set to be defender default, the first one scripted in the file is chosen. No by default.
	## cardinality = 0..1
	defender_default = bool

	### Affects threat generated by conquering systems & planets. 1.0 by default.
	## cardinality = 0..1
	threat_multiplier = float

	### This decides whether claims should be listed in the description. No by default.
	## cardinality = 0..1
	show_claims_in_description = bool

	## cardinality = 0..1
	total_war = bool
	### Hide this wargoal if country doesn't have the requisite CB. No by default.
	## cardinality = 0..1
	hide_if_no_cb = bool

	### Will countriews that have sworn secret fealty to the attacker join the war? No by default.
	## cardinality = 0..1
	secret_fealties_join_attacker = bool

	### This affects how likely the AI is to surrender to this wargoal, generally less willing on more severe wargoals (negative numbers = less willing). 0 by default.
	## cardinality = 0..1
	surrender_acceptance = int
	### This affects how quickly war exhaustion builds up for this side in the war (2.0 = twice as fast). 1.0 by default.
	## cardinality = 0..1
	war_exhaustion = float

	### If used as attacker wargoal and set, defender will have their wargoal predetermined by this. If not set, defender gets to pick their own wargoal.
	## cardinality = 0..1
	set_defender_wargoal = <war_goal>

	## cardinality = 0..1
	forbidden_peace_offers = {
		## cardinality = 0..1
		demand_surrender = localisation
		## cardinality = 0..1
		status_quo = localisation
		## cardinality = 0..1
		surrender = localisation
	}

	## cardinality = 0..1
	release_occupied_systems_on_status_quo = bool

	### default: no
	## cardinality = 0..1
	show_agreement_terms = bool

	### FROM = The targeted country, THIS = The acting country
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	potential = single_alias_right[trigger_clause]

	### FROM = The targeted country, THIS = The acting country
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	possible = single_alias_right[trigger_clause]

	## cardinality = 0..1
	### Set what peace offers are allowed. Leaving this out means no peace, which is usually a bug, hence making this a necessary field.
	allowed_peace_offers = {
		## cardinality = 0..3
		enum[peace_offer]
	}

	### Run when war ends in status quo. The targeted country, THIS = The acting country
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	on_status_quo = single_alias_right[effect_clause]

	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	on_wargoal_set = single_alias_right[effect_clause]

	### Run when target surrenders after claims are ceded. The targeted country, THIS = The acting country
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	on_accept = single_alias_right[effect_clause]

	### FROM = The targeted country, THIS = The acting country
	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	## replace_scopes = { this = country root = country from = country }
	galactic_empire_joins_defender = single_alias_right[trigger_clause]

	### Starbases are destroyed instead of ownership being transferred
	## cardinality = 0..1
	destroy_starbases = yes

	## cardinality = 0..1
	should_ignore_federations = bool
}
