types = {
	type[job] = {
		path = "game/common/pop_jobs"
		file_extension = .txt
		subtype[capped] = {
			## cardinality = 0..1
			is_capped_by_modifier = yes
		}
		subtype[uncapped] = {
			is_capped_by_modifier = no
		}
		localisation = {
			name = "job_$"
			## optional
			plural = "job_$_plural"
			## optional
			desc = swappable_data/default/desc
			## optional
			desc = "job_$_desc"
			## optional
			effect = "job_$_effect_desc"
			## optional
			condition_string = swappable_data/default/condition_string
		}
		images = {
			icon = swappable_data/default/icon # <job> | filepath[gfx/interface/icons/jobs/job_,.dds]
			icon = "gfx/interface/icons/jobs/job_$.dds"
			building_icon = swappable_data/default/building_icon # <building> | icon[gfx/interface/icons/buildings]
		}
	}
	## type_key_filter = swap_type
	type[swapped_job] = {
		base_type = job
		path = "game/common/pop_jobs"
		file_extension = .txt
		skip_root_key = { any swappable_data }
		name_field = name
		localisation = {
			name = "job_$"
			## optional
			plural = "job_$_plural"
			## optional
			desc = desc
			## optional
			desc = "job_$_desc"
			## optional
			effect = "job_$_effect_desc"
			## optional
			condition_string = condition_string
		}
		images = {
			icon = icon # <job> | filepath[gfx/interface/icons/jobs/job_,.dds]
			icon = "gfx/interface/icons/jobs/job_$.dds"
			building_icon = building_icon # <building> | icon[gfx/interface/icons/buildings]
		}
	}
}

## push_scope = pop_group
job = {
	# make it optional to compatible with leader background jobs
	## cardinality = 0..1
	category = <pop_category>

	### default: no?
	## cardinality = 0..1
	first_come_first_served = bool
	## cardinality = 0..1
	is_capped_by_modifier = bool
	### default no
	## cardinality = 0..1
	can_be_automated = bool

	## cardinality = 0..1
	swappable_data = {
		default = {
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			icon = <job>
			## cardinality = 0..1
			icon = filepath[gfx/interface/icons/jobs/job_,.dds]
			## cardinality = 0..1
			building_icon = <building>
			## cardinality = 0..1
			building_icon = icon[gfx/interface/icons/buildings]
			## cardinality = 0..1
			condition_string = localisation
		}
		## cardinality = 0..inf
		swap_type = {
			## cardinality = 1..1
			## replace_scopes = { this = planet root = planet }
			trigger = single_alias_right[trigger_clause]

			## cardinality = 0..1
			name = localisation
			## cardinality = 0..1
			desc = localisation
			## cardinality = 0..1
			icon = <job>
			## cardinality = 0..1
			icon = filepath[gfx/interface/icons/jobs/job_,.dds]
			## cardinality = 0..1
			building_icon = <building>
			## cardinality = 0..1
			building_icon = icon[gfx/interface/icons/buildings]
			## cardinality = 0..1
			condition_string = localisation
			weight = float
			weight = {
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}
		}
	}

	### Makes job count as unemployment for now
	## cardinality = 0..1
	demotion_target = <pop_category>

	## cardinality = 0..1
	exempt_from_ai_amenity_prioritization = bool
	## cardinality = 0..1
	count_as_available_for_ai =bool
	## cardinality = 0..1
	can_set_priority = bool
	## cardinality = 0..1
	is_pre_sapient = bool
	## cardinality = 0..1
	ignores_sapience = bool
	## cardinality = 0..1
	ignores_favorite = bool
	## cardinality = 0..1
	purge = <purge_type>

	## cardinality = 0..1
	### Sets whether the job contributes to diplo weight. Default = yes
	contributes_to_diplo_weight = bool

	## cardinality = 0..1
	### Only uses certain simple triggers.
	possible_pre_triggers = {
		alias_name[pop_pre_trigger] = alias_match_left[pop_pre_trigger]
	}

	## cardinality = 0..1
	tags = {
		## cardinality = 0..inf
		enum[job_tag]
	}

	## cardinality = 0..1
	triggered_tags = {
		## cardinality = 1..1
		## push_scope = planet
		trigger = single_alias_right[trigger_clause]
		## cardinality = 1..1
		tags = {
			## cardinality = 0..inf
			enum[job_tag]
		}
	}

	## cardinality = 0..1
	localized_tags = {
		## cardinality = 0..inf
		localisation
	}

	## cardinality = 0..1
	possible_precalc = enum[job_trigger]

	## cardinality = 0..1
	possible = single_alias_right[trigger_clause]

	## cardinality = 0..inf
	## replace_scopes = { this = planet root = planet }
	resources = {
		## cardinality = 0..1
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}
	## cardinality = 0..inf
	overlord_resources = {
		## cardinality = 0..1
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	## replace_scopes = { this = pop_group root = pop_group }
	pop_group_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = country root = country }
	country_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = planet root = planet }
	planet_modifier = single_alias_right[modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system }
	system_modifier= single_alias_right[modifier_clause]

	## cardinality = 0..inf
	## replace_scopes = { this = pop_group root = pop_group }
	triggered_planet_pop_group_modifier_for_species = single_alias_right[triggered_modifier_clause]
	## cardinality = 0..inf
	## replace_scopes = { this = pop_group root = pop_group }
	triggered_planet_pop_group_modifier_for_all = single_alias_right[triggered_modifier_clause]
	## cardinality = 0..inf
	## replace_scopes = { this = country root = country }
	triggered_country_modifier = single_alias_right[triggered_modifier_clause]
	## cardinality = 0..inf
	## replace_scopes = { this = planet root = planet }
	triggered_planet_modifier = single_alias_right[triggered_modifier_clause]
	## cardinality = 0..1
	## replace_scopes = { this = system root = system }
	triggered_system_modifier= single_alias_right[triggered_modifier_clause]
	## cardinality = 0..1
	weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..1
	demotion = {
		time = int
		## replace_scopes = { this = system root = system }
		effect = single_alias_right[effect_clause]
	}

	### The auto_trait_prio list on jobs should contain one valid trait swap for each trait category.
	## cardinality = 0..1
	auto_trait_prio = {
		## cardinality = 1..inf
		<trait>
	}

	## cardinality = 0..1
	promotion = {
		time = int
		## replace_scopes = { this = pop_group root = pop_group }
		effect = single_alias_right[effect_clause]
	}

}

