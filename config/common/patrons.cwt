types = {
    type[patron_type] = {
        path = "game/common/patrons"
        file_extension = .txt
        path_strict = yes
        localisation = {
            name = "$"
            desc = "$_desc"
        }
        images = {

        }
    }
    type[calling] = {
        path = "game/common/patrons/callings"
        file_extension = .txt
        localisation = {
            name = "$"
            desc = "$_desc"
        }
    }
    type[deed] = {
        path = "game/common/patrons/deeds"
        file_extension = .txt
        subtype[has_desc] = {
            has_desc = yes
        }
        localisation = {
            name = "$"
            subtype[has_desc] = {
                desc = "$_desc"
            }
        }
    }
    type[psionic_aura] = {
        path = "game/common/patrons/psionic_auras"
        file_extension = .txt
        localisation = {
            name = "$"
            desc = "$_desc"
        }
    }
}

enums = {
    complex_enum[deed_counter] = {
        path = "game/common/patrons/deeds"
        name = {
            counter = {
                enum_name = {

                }
            }
        }
    }
    complex_enum[calling_counter] = {
        path = "game/common/patrons/callings"
        name = {
            counter = {
                enum_name = {

                }
            }
        }
    }
}

patron_type = {
    ## cardinality = 1..1
    category = enum[parton_type_category]

    ## cardinality = 1..1
    color = {
        ## cardinality = 3..4
        float
    }

    text_color_code = <text_color>

    first_contact_event = <event.country>

    covenant_event = <event.country>

    covenant_confirmation_time = int

    add_modifier = bool

    pre_communications_name_format = {
        ## cardinality = 0..inf
        <pre_communications_name_parts_list>
    }

    ## cardinality = 1..1
    position = { x = float y = float }

    callings = {
        ## cardinality = 0..inf
        <calling>
    }

    deeds = {
        ## cardinality = 0..inf
        <deed>
    }

    ## cardinality = 1..1
    covenant = {
        name = localisation
        icon = <sprite>
        desc = localisation

        ## cardinality = 0..inf
        ## replace_scopes = { this = country root = country }
        triggered_modifier = single_alias_right[triggered_modifier_clause]
    }

    ## cardinality = 0..inf
    passive_accord = {
        name = localisation
        icon = <sprite>

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        on_unlock = single_alias_right[effect_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        on_revert = single_alias_right[effect_clause]

        ## cardinality = 0..inf
        ## replace_scopes = { this = country root = country }
        triggered_modifier = single_alias_right[triggered_modifier_clause]

    }
    ## cardinality = 0..inf
    active_accord = {
        name = localisation
        icon = <sprite>
        sound = <sound_effect>
        cooldown = int
        first_cooldown = int

        activation_cost = {
            cost = {
                ## cardinality = 0..inf
                <resource> = int
            }
        }

        ## cardinality = 0..1
        cost_override_key = localisation

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        possible = single_alias_right[trigger_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        effect = single_alias_right[effect_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        on_revert = single_alias_right[effect_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        ai_will_do = {
            factor = float
            alias_name[modifier_rule] = alias_match_left[modifier_rule]
        }
    }


}

calling = {
    ## cardinality = 0..1
    ## replace_scopes = { this = country root = country }
    potential = single_alias_right[trigger_clause]

    first_tier = int

    ###min and max define in 00_define.txt: "CALLINGS_TIER_MIN" and "CALLINGS_TIER_MAX"
    ## cardinality = 0..inf
    tier = {
        attunement = int

        ## cardinality = 0..1
        ## replace_scopes = { this = country root = country }
        trigger = single_alias_right[trigger_clause]

        ## cardinality = 0..inf
        counter = {
            ## cardinality = 0..inf
            localisation = {
                ## cardinality = 0..1
                max = int
            }
        }

    }

}

deed = {
    ##
    attunement = int[1...inf]

    ###Does the deed has a description describing a specific case for the given attunement (ex: attunement multiplied by a certain value) (Can be empty and no by default)
    ## cardinality = 0..1
    has_desc = bool

    ## cardinality = 0..inf
    counter = {
        ## cardinality = 0..inf
        localisation = {
            ## cardinality = 0..1
            max = int
        }
    }

    ## cardinality = 0..1
    ## replace_scopes = { this = country root = country }
    potential = single_alias_right[trigger_clause]

}

psionic_aura = {
    patron = <parton_type>
    background = <sprite>

    intensity_level = {
        end = int
        ## cardinality = 0..1
        ## replace_scopes = { this = fleet root = fleet }
        owner_fleet_modifier = single_alias_right[triggered_modifier_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = planet root = planet }
        owner_planet_modifier = single_alias_right[triggered_modifier_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = fleet root = fleet }
        neutral_fleet_modifier = single_alias_right[triggered_modifier_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = planet root = planet }
        neutral_planet_modifier = single_alias_right[triggered_modifier_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = fleet root = fleet }
        rival_fleet_modifier = single_alias_right[triggered_modifier_clause]

        ## cardinality = 0..1
        ## replace_scopes = { this = planet root = planet }
        rival_planet_modifier = single_alias_right[triggered_modifier_clause]

    }

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_start = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_monthly = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_gain_level = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_lose_level = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_progress_complete = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_type_change = single_alias_right[effect_clause]

    ## cardinality = 0..1
    ## replace_scopes = { this = galactic_object root = galactic_object }
    on_vanish = single_alias_right[effect_clause]

    ## cardinality = 0..inf
    ## replace_scopes = { this = system root = system }
    triggered_system_modifier = single_alias_right[triggered_modifier_clause]

    daily_decrease = {
        ## replace_scopes = { this = galactic_object root = galactic_object }
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }

    monthly_decrease = {
        ## replace_scopes = { this = galactic_object root = galactic_object }
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }

    increase_trigger = {
        ## replace_scopes = { this = galactic_object root = galactic_object }
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }

    monthly_increase = {
        ## replace_scopes = { this = galactic_object root = galactic_object }
        alias_name[modifier_rule] = alias_match_left[modifier_rule]
    }

    ## file_extensions = { .dds }
    aura_galaxy_texture = filepath
    ## file_extensions = { .dds }
    aura_hyperlane_texture = filepath

}
