types = {
	type[district] = {
		path = "game/common/districts"
		file_extension = .txt
		subtype[capped] = {
			## cardinality = 0..1
			is_capped_by_modifier = yes
		}
		subtype[uncapped] = {
			is_capped_by_modifier = no
		}
		subtype[starting_district] = {
			default_starting_district = yes
		}
		localisation = {
			name = "$"
			desc = "$_desc"
			plural = "$_plural"
		}
		images = {
			icon = icon # icon[gfx/interface/icons/districts]
			icon = "gfx/interface/icons/districts/$.dds" # inferred
			background = GFX_$_bg|$icon
			background = GFX_$_bg|$district_backgroundr
			gridbox = GFX_$_box_icon_rectangle|$icon
			gridbox = GFX_$_box_icon_rectangle|$gridbox
		}
	}
}

## push_scope = planet
district = {
	### default: no
	## cardinality = 0..1
	expansion_planner = bool
	## cardinality = 0..1
	default_starting_district = bool
	## cardinality = 0..1
	base_cap_amount = int

	### Icon to display for the district, required if no district icon matches the district name.
	## cardinality = 0..1
	icon = icon[gfx/interface/icons/districts]
	### A sprite that is displayed in the top right corner of the district icon, expected sprite size is 32Ã—32.
	## cardinality = 0..1
	overlay_icon = <sprite>

	### If defined AFTER the icon (or no icon is provided) overrides the gridbox associated with the icon.
	## cardinality = 0..1
	gridbox = <district>
	## cardinality = 0..1
	gridbox = scalar

	### If defined AFTER the icon (or no icon is provided) overrides the district background associated with the icon.
	## cardinality = 0..1
	district_background = <district>
	## cardinality = 0..1
	district_background = scalar

	### Default empty. Defines the width of the district in the UI.
	## cardinality = 0..1
	custom_gui = scalar
	### Default 1. Ensures that dummy districts are spawned to ensure district spacing is correct.
	## cardinality = 0..1
	district_width = int
	### Default yes. Determine whether the first zone slot of the district should be displayed like the city_government slot or if all zones should be displayed in the gridbox
	## cardinality = 0..1
	has_primary_zone = bool

	subtype[starting_district] = {
		## cardinality = 1..1
		zone_slots = {
			## cardinality = 1..inf
			<zone_slots>
		}
	}

	subtype[!starting_district] = {
		## cardinality = 1..1
		zone_slots = {
			## cardinality = 0..inf
			<zone_slots>
		}
	}

	## cardinality = 0..1
	base_buildtime = int
	## cardinality = 0..1
	inherits_capped_modifiers_from = <district>

	## cardinality = 0..inf
	desc = localisation
	## cardinality = 0..inf
	desc = single_alias_right[triggered_desc_clause]
	## cardinality = 0..1
	min_for_deposits_on_planet = int
	## cardinality = 0..1
	max_for_deposits_on_planet = int


	## cardinality = 0..1
	is_capped_by_modifier = bool
	## cardinality = 0..1
	### whether this district is exempt from being swapped into groups by the AI; default: no
	exempt_from_ai_planet_specialization = bool
	## cardinality = 0..1
	can_demolish = bool

	## cardinality = 0..1
	destroy_trigger = single_alias_right[trigger_clause]

	## cardinality = 0..1
	## replace_scopes = { root = country this = country }
	show_tech_unlock_if = single_alias_right[trigger_clause]

	## cardinality = 0..1
	show_on_uncolonized = single_alias_right[trigger_clause]

	potential = single_alias_right[trigger_clause]

	## cardinality = 0..1
	allow = single_alias_right[trigger_clause]

	## cardinality = 0..1
	on_queued = single_alias_right[effect_clause]
	## cardinality = 0..1
	on_unqueued = single_alias_right[effect_clause]
	## cardinality = 0..1
	on_built = single_alias_right[effect_clause]

	## cardinality = 0..1
	prerequisites = {
		## cardinality = 0..inf
		<technology>
	}

	## cardinality = 0..1
	conversion_ratio = float
	## cardinality = 0..1
	convert_to = {
		## cardinality = 0..inf
		<district>
	}

	## cardinality = 0..inf
	resources = {
		## cardinality = 0..1
		category = <economic_category>
		alias_name[economic_template] = alias_match_left[economic_template]
	}

	## cardinality = 0..1
	## replace_scopes = { this = planet root = planet }
	planet_modifier = single_alias_right[modifier_clause]

	## cardinality = 0..inf
	## replace_scopes = { this = planet root = planet }
	triggered_planet_modifier = single_alias_right[triggered_modifier_clause]

	## cardinality = 0..inf
	triggered_desc = single_alias_right[triggered_desc_clause]

	## cardinality = 0..1
	ai_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	## cardinality = 0..inf
	ai_resource_production = {
		<resource> = int
		## cardinality = 0..1
		trigger = single_alias_right[trigger_clause]
		## cardinality = 0..inf
		enum[complex_maths_enum] = value_field
	}

	## replace_scopes = { this = planet root = planet }
	## cardinality = 0..inf
	triggered_name = single_alias_right[triggered_desc_clause]

	## replace_scopes = { this = planet root = planet }
	## cardinality = 0..inf
	triggered_flavor_desc = single_alias_right[triggered_desc_clause]

	## cardinality = 0..1
	ai_estimate_without_unemployment = bool
	## cardinality = 0..1
	additional_ai_weight = float
	## cardinality = 0..1
	ai_weight_coefficient = float
}
