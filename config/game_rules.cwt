game_rules = {
	# region from 00_rules.txt

	# Tooltips will be generated from these rules when they fail. Use of custom_tooltip is recommended
	# There are still multiple hard-coded rules that apply in addition to these.
	# If rules here evaluate to true, there might still be other rules that make the action unavailable.
	# If a rule here evaluates to false the action will become unavailable

	### Root = target country
	### This = country
	## replace_scopes = { this = country root = country }
	is_valid_rival

	## Root = claimer
	## This = system
	## replace_scopes = { this = system root = country }
	can_add_claim

	### Root = taker country
	### This = giver country
	## replace_scopes = { this = country root = country }
	can_get_claim_from_lost_system

	### Root = Bombarding country
	### This = Receiving country
	## replace_scopes = { this = country root = country }
	should_surrender_planets_to

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	species_has_citizenship

	### Root = country
	### This = pop_group
	## replace_scopes = { this = pop_group root = country }
	should_abduct_pop_group

	### Root = planet
	### This = species
	## replace_scopes = { this = species root = planet }
	species_can_live_on_planet

	### Root = planet
	### This = species
	## replace_scopes = { this = species root = planet }
	species_has_uncapped_habitability_on_planet

	### Note: this is also used in pop faction support calculations
	### Root = country
	### This = pop_group
	## replace_scopes = { this = pop_group root = country }
	can_vote_in_democratic_election

	### This = leader
	## replace_scopes = { this = leader }
	should_pay_for_leader_upkeep

	### Checks whether any leaders (scientists etc) can be formed from this pop group
	### Root = country
	### This = pop_group
	## replace_scopes = { this = pop_group root = country }
	can_generate_leader_from_pop_group

	### Checks whether this species is eligible to become rulers through elections
	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_generate_leader_from_species

	### Checks whether this species can become espionage assets (note that some checks are also done in code)
	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_create_espionage_asset_from_species

	### Root = country
	### This = pop_group
	## replace_scopes = { this = pop_group root = country }
	can_generate_military_leader_from_pop_group

	### Root = species
	### This = planet
	## replace_scopes = { this = planet root = species }
	can_generate_army_from_planet

	### Root = planet
	### This = country
	## replace_scopes = { this = country root = planet }
	can_release_vassal

	### Root = species
	### This = country
	## replace_scopes = { this = country root = species }
	can_release_vassal_from_species

	### Root = species
	### This = country
	## replace_scopes = { this = country root = species }
	can_generate_army_from_species

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_modify_species

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_uplift_species

	### This rule is a condition for when subjects that normally cannot colonize outside their borders are allowed to
	### This = country, suject
	### Root = country, overlord
	### From = target solar system
	## replace_scopes = { this = country root = country from = system }
	subject_can_expand

	### This rule is a condition for taking hostile actions towards neutral targets. Such as landing troops or attacking their fleets
	### Root = country, attacker
	### This = country, target
	## replace_scopes = { this = country root = country }
	can_take_hostile_actions

	### This rule is a condition for declaring war
	### Root = country, attacker
	### This = country, target
	## replace_scopes = { this = country root = country }
	can_declare_war

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_colonize_planet

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_colonize_outside_borders

	### Root = country
	### This = planet
	## replace_scopes = { this = planet root = country }
	can_terraform_planet

	### Root = country
	### This = species
	## replace_scopes = { this = species root = country }
	can_colonize_with_species

	### NOTE: species_has_happiness is also checked for this
	### Root = Pop Group
	### From = Country
	### This = Species
	## replace_scopes = { this = species root = pop_group from = country }
	pop_group_has_random_ethics

	### Root = Pop Group
	### From = Country
	### This = Species
	## replace_scopes = { this = species root = pop_group from = country }
	species_has_happiness

	### Checks if a species can procreate
	### This = Species
	### Root = Planet
	## replace_scopes = { this = species root = planet }
	can_species_procreate

	### Checks if a pop can be assembled
	### This = Species
	### Root = Planet
	## replace_scopes = { this = species root = planet }
	can_species_be_assembled

	### Checks if a species uses bonus_growth modifier
	### This = Species
	### Root = Planet
	## replace_scopes = { this = species root = planet }
	species_uses_bonus_growth

	### Root = country
	### From = species
	## replace_scopes = { this = country root = country from = species }
	founder_species_uses_logistic_growth_mult

	## replace_scopes = { this = country root = country from = species }
	founder_species_uses_assembly

	## replace_scopes = { this = country root = country from = species }
	founder_species_uses_bonus_growth_mult

	### This rule is a condition for bombarding planets
	### Root = fleet, potential attacker
	### From = planet, potential target
	## replace_scopes = { this = fleet root = fleet from = planet }
	can_orbital_bombard

	### Check if it is possible to build orbital stations on this planet
	### this: planet
	### root: country
	## replace_scopes = { this = planet root = country }
	can_planet_support_orbital_station

	### Check if full sensor range in entire galaxy
	### root: country
	## replace_scopes = { this = country root = country }
	has_full_sensor_range

	### Determines if notification messages should be sent after a ground combat
	### this: planet
	### from: winner
	### root: loser
	## replace_scopes = { this = planet root = country from = country }
	show_notification_for_ground_combat

	### Determines if the "per_neighbor_rival" static modifier should be applied to an empire
	### this: country
	## replace_scopes = { this = country }
	should_apply_neighbor_rival_modifier

	### Root: Rebelling against country
	### This: Rebel country
	## replace_scopes = { this = country root = country }
	are_rebels_hostile

	### Root: planet
	## replace_scopes = { this = planet root = planet }
	should_colony_be_destroyed_on_pc_change

	### Is the given fleet the portal for given extradimensional country
	### root: country (ED)
	### this: fleet
	## replace_scopes = { this = fleet root = country }
	is_extradimensional_portal

	### Is the given fleet an anchor for given extradimensional country
	### root: country (ED)
	### this: fleet
	## replace_scopes = { this = fleet root = country }
	is_extradimensional_anchor

	### Will colonizing this planet tick off a fallen empire?
	### Root = fallen empire
	### This = planet
	## replace_scopes = { this = planet root = country }
	will_anger_fallen_empire

	### Can the country have robot pop
	### root: country
	## replace_scopes = { this = country root = country }
	can_have_robot_pops

	### THIS = Fleet
	## replace_scopes = { this = fleet }
	fleet_uses_templates

	### this = starbase, megastructure or planet
	can_orbitable_repair_ships

	### this = ship
	### root = country that kills ship
	## replace_scopes = { this = ship root = country }
	can_spawn_debris

	### Determines if AI-controlled empires should restrict (and thus avoid) a system
	### This game rule takes priority over ai_should_not_restrict_system below
	### Used by regular empires, fallen empires & crises
	### this = system
	### root = country
	## replace_scopes = { this = system root = country }
	ai_should_restrict_system

	### this = system
	### root = country
	### Determines if AI-controlled empires should never restrict (and thus avoid) a system
	### Used by regular empires, fallen empires & crises
	## replace_scopes = { this = system root = country }
	ai_should_not_restrict_system

	### this = country
	## replace_scopes = { this = country }
	can_subjugate_empires

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_council_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_normal_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_subclass_trait

	### this = leader
	## replace_scopes = { this = leader }
	can_leader_get_destiny_trait

	### this = country
	## replace_scopes = { this = country }
	has_extra_council_position

	### THIS = Fleet
	## replace_scopes = { this = fleet }
	can_jump_drive

	### this = country
	## replace_scopes = { this = country }
	can_spawn_occupation_armies

	### this = system
	### root = country
	## replace_scopes = { this = system root = country }
	system_blocks_sensors

	### Root = country attempting to target system for movement
	### This = system being targeted
	## replace_scopes = { this = system root = country }
	can_enter_system_by_jump

	### This = pop_group
	## replace_scopes = { this = pop_group }
	can_resettle_pop_group

	### This = Country
	## replace_scopes = { this = country }
	can_country_resettle

	### This = Planet
	## replace_scopes = { this = planet }
	can_resettle_planet

	### This = Planet
	## replace_scopes = { this = planet }
	should_spawn_deposits

	### This = Planet
	## replace_scopes = { this = planet }
	can_get_colony_events

	### This = Planet
	## replace_scopes = { this = planet }
	is_new_colony

	### This = pop_group
	## replace_scopes = { this = pop_group }
	pop_group_generates_crime

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_grow_on_planet

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_assemble_on_planet

	### This = planet
	## replace_scopes = { this = planet }
	can_pops_decline_on_planet

	### If this returns true, the species will be set to decline even if it is not being purged
	### Note: success text tooltips are shown in alert_pops_declining alert.
	### This = species
	### From = planet
	## replace_scopes = { this = species root = species from = planet }
	should_force_decline_species

	### This = country
	## replace_scopes = { this = country }
	can_build_branch_offices

	### This = country
	## replace_scopes = { this = country }
	can_support_branch_offices

	### This = planet
	### Root = country
	## replace_scopes = { this = planet root = country }
	can_build_branch_office_on_planet

	### Checked by is_criminal_syndicate trigger
	### This = country
	## replace_scopes = { this = country }
	is_criminal_syndicate_rule

	### This = planet
	## replace_scopes = { this = planet }
	can_crossbreed_species_on_planet

	### This = species one
	### Root = species two
	## replace_scopes = { this = species root = species }
	can_crossbreed_species

	### No scope
	## replace_scopes = { this = no_scope }
	can_win_timed_victory

	### This = country
	## replace_scopes = { this = country }
	can_use_galactic_market

	### ROOT = country
	### This = pop_group
	## replace_scopes = { this = pop_group root = country }
	can_be_sold_on_slave_market

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_community

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_empire

	### This = country
	## replace_scopes = { this = country }
	can_see_galactic_community

	### This = country
	## replace_scopes = { this = country }
	can_be_part_of_galactic_council

	### If, 'yes', forces an empire to be advanced at game start (overrides game settings)
	### This = country
	## replace_scopes = { this = country }
	must_be_advanced_empire

	### If 'no', blocks an empire from being advanced at game start (overrides 'must_be_advanced_empire' above)
	### This = country
	## replace_scopes = { this = country }
	is_allowed_to_be_advanced_empire

	### This = planet
	## replace_scopes = { this = planet }
	has_enough_pops_for_necrophage_on_planet

	### Root = current planet
	### This = pop_group
	### Purge, Sapience, Migration Controls policy (ignored by Gestalts and Synths), and target habitability are checked in code.
	## replace_scopes = { this = pop_group root = planet }
	can_pop_group_auto_migrate

	### Checked before can_pop_auto_migrate to save performance
	### This = planet
	## replace_scopes = { this = planet }
	can_planet_auto_migrate

	## replace_scopes = { this = planet }
	can_planet_receive_auto_migration

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_gene_mod_habitability

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_add_advanced_traits

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_add_negative_traits_organic

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_remove_positive_traits_organic

	### This, root = country
	## replace_scopes = { this = country root = country }
	can_modify_organic_portraits

	### This = Country establishing contact | From = Target country
	### Should the contact logic happen?
	## replace_scopes = { this = country from = country }
	can_have_contact

	### This = country establishing contact | From = target country
	### Final check for whether there should be a first contact site spawned. Main check is via country type 'contact_rule', in code. See also: error-logging/fixing event 'action.240', which duplicates this trigger.
	## replace_scopes = { this = country from = country }
	can_have_first_contact

	### Root = Country with envoys to send
	### This = Imperium leader country
	## replace_scopes = { this = country root = country }
	can_use_envoys_to_raise_imperial_authority

	### Root = Country with envoys to send
	### This = Imperium leader country
	## replace_scopes = { this = country root = country }
	can_use_envoys_to_lower_imperial_authority

	### this/root = pop group
	### checked if job's possible_precalc = can_fill_drone_job
	## replace_scopes = { this = pop_group root = pop_group }
	can_fill_drone_job

	### this/root = pop group
	### checked if job's possible_precalc = can_fill_worker_job
	## replace_scopes = { this = pop_group root = pop_group }
	can_fill_worker_job

	### this/root = pop group
	### checked if job's possible_precalc = can_fill_specialist_job
	## replace_scopes = { this = pop_group root = pop_group }
	can_fill_specialist_job

	### this/root = pop group
	### checked if job's possible_precalc = can_fill_ruler_job
	## replace_scopes = { this = pop_group root = pop_group }
	can_fill_ruler_job

	### this/root = pop
	### checked if job's possible_precalc = can_fill_precursor_job
	## replace_scopes = { this = pop_group root = pop_group }
	can_fill_precursor_job

	### Some parts in code still need to know some more specifics from script
	### this/root = pop job
	## replace_scopes = { this = pop_job root = pop_job }
	is_unemployment_job

	### Some parts in code still need to know some more specifics from script
	## replace_scopes = { this = pop_job root = pop_job }
	### this/root = pop job
	is_civilian_job

	### Checks whether the game should try and build a building or district on a planet via scripts in common/colony_automation
	### Does not apply to "emergency building" (colony_automation_exceptions)
	### this = planet
	## replace_scopes = { this = planet }
	should_planetary_automate

	## replace_scopes = { this = country }
	dismiss_leader_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader
	## replace_scopes = { this = leader }
	can_dismiss_leader

	### this = country
	## replace_scopes = { this = country }
	can_country_change_councilors

	### this = leader
	## replace_scopes = { this = leader }
	should_count_towards_leader_cap

	### From = country, country that tries to connect using relay network
	### ROOT/This = country, target country to connect to using relay network
	## replace_scopes = { this = country root = country }
	can_country_connect_to_relay_network

	### this = planet
	## replace_scopes = { this = planet }
	should_ai_build_stronghold_on_vulnerable_planet

	### Used to call on the Retirement Toast when a leader dies
	### This = leader
	## replace_scopes = { this = leader }
	will_leader_retire

	### Used to call the Second Chance toast when a leader dies, still need to clone it and actually have the leader survive
	### This = leader
	## replace_scopes = { this = leader }
	will_leader_survive

	### This = country, Country that wants to get an external leader
	### From = country, country that we are trying to get from
	## replace_scopes = { this = country root = country }
	can_get_external_leader_pool_candidate

	### This = leader, leader we'd like to trade
	### Root = country, country that owns the leader currently
	### From = country, country that would receive the leader
	## replace_scopes = { this = leader root = country from = country }
	can_trade_leader

	### This = fleet, fleet we'd like to trade
	### Root = country, country that owns the fleet currently
	### From = country, country that would receive the fleet
	## replace_scopes = { this = fleet root = country from = country }
	can_trade_fleet

	### this = leader
	### from = country scope
	## replace_scopes = { this = leader from = country }
	can_leader_be_ruler

	### this = leader
	### from = country scope
	## replace_scopes = { this = leader from = country }
	can_leader_be_councilor

	### this = country
	## replace_scopes = { this = country }
	is_country_psionic

	### this = species
	## replace_scopes = { this = species }
	is_psionic_species

	## replace_scopes = { this = country }
	chance_for_external_leader_pool = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = country scope
	## replace_scopes = { this = country }
	council_agenda_early_activation_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### The planet automation doesn't attempt to build new buildings while the number of unemployed
	### pops (excluding civilians) doesn't exceed the number of vacant workspaces by this threshold,
	### and the number of civilians is less than building_automation_civilians_threshold.
	### this = planet scope
	## replace_scopes = { this = planet }
	building_automation_unemployment_threshold = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### The planet automation doesn't attempt to build new buildings while the number of unemployed pops (excluding civilians)
	### doesn't exceed the number of vacant workspaces by building_automation_unemployment_threshold, and the number of civilians
	### is less than this threshold.
	### this = planet scope
	## replace_scopes = { this = planet }
	building_automation_civilians_threshold = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	shroud_delve_cooldown_days = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	count_shroud_worlds_to_display = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope
	### from = country scope
	## replace_scopes = { this = leader from = country }
	leader_election_elect_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = country scope
	## replace_scopes = { this = country }
	emergency_election_cost_rule = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope (not valid in UI if no leader is selected)
	### from = country scope
	## replace_scopes = { this = leader from = country }
	leader_election_support_cost = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### this = leader scope
	## replace_scopes = { this = leader }
	leader_election_weight = {
		alias_name[modifier_rule] = alias_match_left[modifier_rule]
	}

	### Determines if pre-ftl country is unaware of alien life
	### this: pre-ftl country
	## replace_scopes = { this = country }
	are_pre_ftls_unaware

	### This = planet
	### Checked if planet is a terraforming candidate
	## replace_scopes = { this = planet }
	is_terraforming_candidate

	### Root = country
	### This = planet
	### Checked if the planet is special terraforming candidate and the country has the required matching ascension perk to do it
	## replace_scopes = { this = planet root = country }
	has_ascension_for_terraforming_candidate

	### This = country that tries to rename
	### Root = country owning the planet
	### From = planet
	### Checks if the planet (from) can be renamed by the country (this) that contains it in its borders, even if it has a different owner (Root)
	### Renaming is never possible if the planet is not in your borders; and it is always possible if it is in your borders but the owner is yourself/no-one
	## replace_scopes = { this = country root = country from = planet }
	can_be_renamed_by

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build any orbital station around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_station_around

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build a mining station around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_mining_station_around

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build a research station around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_research_station_around

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build a military station around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_military_station_around

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build an observation station around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_observation_station_around

	### Root/this = country
	### From = planet OR astral_rift
	### Checks if the country is allowed to build a starbase around this planet/star/astral_rift
	## replace_scopes = { this = country root = country from = any }
	can_build_starbase_around

	### Root/this = country
	### Checks if the country's capital has any kind of relevancy (aka is the capital in the galaxy really theirs)
	## replace_scopes = { this = country root = country }
	has_inworld_capital

	### Root/this = trading country
	### From = country traded with
	### Checks if target country has economy power relative to begin with
	## replace_scopes = { this = country root = country from = country }
	has_relative_economy_power

	### Root/this = trading country
	### From = country traded with
	### Checks if the country can trade sensor
	## replace_scopes = { this = country root = country from = country }
	can_trade_sensor

	### Root/this = trading country
	### From = country traded with
	### Checks if the country can trade favor
	## replace_scopes = { this = country root = country from = country }
	can_trade_favor

	### THIS = country
	### FROM = Astral Rift checked
	## replace_scopes = { this = country from = astral_rift }
	can_interact_with_astral_rift

	### THIS = country
	### FROM = Astral Rift checked
	## replace_scopes = { this = country from = astral_rift }
	can_explore_astral_rift

	### THIS = leader
	### FROM = Astral Rift checked
	### Checks if the selected leader can explore the rift
	## replace_scopes = { this = leader from = astral_rift }
	can_leader_explore_astral_rift

	### FROM = country of the ai (in case it's relevant)
	### THIS = planet
	### this determines if the planet is allowed to receive a governor at all, and isn't called for a specific candidate
	## replace_scopes = { this = planet from = country }
	can_ai_assign_governor

	### if the galactic community exists, is a galactic empire, and the country is part of it
	### the ai will call this to see if it should set its delegate to strengthn it
	### It is guaranteed that the galactic community exists, is an empire, and the country is part of it
	### when this rule is called
	### THIS = Country
	### FROM = Galactic Emperor (Country)
	## replace_scopes = { this = country from = country }
	should_ai_support_galactic_empire

	### if the galactic community exists, is a galactic empire, and the country is part of it
	### and if it didn't decided to strengthen the empire,
	### the ai will call this to see if it should set its delegate to undermine it
	### if the ai neither wants to support nor undermine the galactic empire, it will just keep
	### its emissary as a standard delegate
	### It is guaranteed that the galactic community exists, is an empire, and the country is part of it
	### when this rule is called
	### THIS = Country
	### FROM = Galactic Emperor (Country)
	## replace_scopes = { this = country from = country }
	should_ai_undermine_galactic_empire

	### root/this = country
	## replace_scopes = { this = country from = country }
	can_country_initiate_storm

	# TODO 不一致：需确认实际语义（在“行星上发起风暴”还是“恒星上”）。若确为“行星”，应改文档注释；若确为“恒星”，应改 replace_scopes。
	### root/this = star
	## replace_scopes = { this = planet root = planet }
	can_initiate_storm_on_planet

	### root/this = system
	## replace_scopes = { this = system root = system }
	can_force_see_fleets_in_system

	### root/this = country
	### from = cosmic storm
	## replace_scopes = { this = country root = country from = cosmic_storm }
	has_breached_shroud_storm

	### THIS = Fleet
	## replace_scopes = { this = fleet }
    is_science_fleet_gravity_snare_on_cooldown

	### THIS = Fleet
	### FROM = Country / Snare sender
	## replace_scopes = { this = fleet from = country }
    can_fleet_be_captured_by_snares

    ### THIS = country
    ## replace_scopes = { this = country }
    can_fauna_grow

    ### THIS = country
    ## replace_scopes = { this = country }
    can_use_exhibits

    ### THIS = country
    ## replace_scopes = { this = country }
    can_access_vivarium

    ### this = debris
    ### root = country who can explore debris
    ## replace_scopes = { this = debris root = country }
    can_scavenge_and_research_debris

    ### this = debris
    ### root = country who can explore debris
    ## replace_scopes = { this = debris root = country }
    can_scavenge_debris

    ### this = country
    ### from = location (galactic_object)
    ## replace_scopes = { this = country from = galactic_object }
    can_excavate_outside_borders

    ### this = country
    ## replace_scopes = { this = country }
    can_voidworms_bombard_country

    ### this = country
    ## replace_scopes = { this = country }
    can_use_mutations

    ### this = country
    ## replace_scopes = { this = country }
    can_use_artificial_breeding

    ### this = actor (country)
    ### from = recipient (country)
    ## replace_scopes = { this = country from = country }
    can_trade_specimens

    ### this = ship design
    ### from = owner (country)
    ## replace_scopes = { this = design from = country }
    force_create_default_ship_design

	### this = leader
	## replace_scopes = { this = leader }
	is_organic_leader

    ### from = owner (country)
    ### This = fleet
    ## replace_scopes = { this = fleet from = country }
    is_seeded

	### this = popgroup
	## replace_scopes = { this = pop_group from = pop_group }
	is_organic_pop_group

	### this = country with whom to communicate
	## replace_scopes = { this = country }
	empire_diplomacy_leads_to_shroud

	### this = destroyed ship
	### from = attacker (ship)
	## replace_scopes = { this = ship from = ship }
	can_capture_ship

	### this = country
	## replace_scopes = { this = country }
	is_planetary_ascension_free

	### this = country
	### all countries which pass this rule only add 1 to num_fallen_empires
	## replace_scopes = { this = country from = country }
	count_as_split_fallen_empire

	### this = country
	### from = planet
	### When "colonize" is clicked, open the terraform menu instead
	### This also means the ai_colonize_plans will only contain planets the AI can colonize via colony ships.
	### The rest will be stored as ai_terraform_plans instead.
	### See energy_expenditure_terraforming_to_colonize in common/ai_budget/00_energy_budget.txt for the AI budget implementation.
	## replace_scopes = { this = country from = planet }
	should_colonize_use_terraform

	### this = country
	## replace_scopes = { this = country }
	are_all_leaders_forced_immortal

	### this = country using proxy war
	### from = country to be sent to war
	### root = victim country
	## replace_scopes = { this = country root = country from = country }
	can_be_sent_to_war

	### This = Country
	## replace_scopes = { this = country }
	can_open_shroud_tab

	### This = Country
	## replace_scopes = { this = country }
	can_unlock_accords

	### This = Country
	## replace_scopes = { this = country }
	can_delve

	### Will set the Delve blocked plane icon instead of the disabled one
	### This = Country
	## replace_scopes = { this = country }
	is_delve_blocked

	### from = psionic aura (system)
	### This = Country
	## replace_scopes = { this = country from = system }
	can_see_aura_intensity

	### from = psionic aura owner
	### This = country
	## replace_scopes = { this = country from = country }
	is_hostile_to_aura_owner

	### this = country
	## replace_scopes = { this = country }
	should_reduce_aura_hostile_effect

	### this = pop_group
	### from = country
	## replace_scopes = { this = pop_group from = country }
	should_hide_pop_group_size

	### this = country
	## replace_scopes = { this = country from = country }
	should_hide_planet_sector_pop_amount

	### this = leader
	## replace_scopes = { this = leader from = leader }
	should_leader_gain_trait_every_level

	### this = country scope
	## replace_scopes = { this = country from = country }
	unbidden_additional_conquer_desire

	### This = Country
	## replace_scopes = { this = country from = country }
	is_mercenary

	### this = country
	### from = contact country
	## replace_scopes = { this = country from = country }
	is_mindwarden_exiled_first_contact

	### this = country
	## replace_scopes = { this = country from = country }
	has_shroud_insights

	### this = country
	## replace_scopes = { this = country from = country }
	needs_psionic_aura_insights

	### This = Country
	## replace_scopes = { this = country from = country }
	is_ending_cycle

	### This rule is called if country THIS has custom_diplomacy = yes in its country type
	### This = Country tested
	### From = Target country trying to access diplomacy
	### this = country
	## replace_scopes = { this = country from = country }
	has_custom_diplomacy

	# endregion

	# region from 01_gui_rules.txt

	### This = country
	## replace_scopes = { this = country }
	doom_clock_is_shown

	### This = country
	## replace_scopes = { this = country }
	crisis_name_is_shown

	### This = country
	## replace_scopes = { this = country }
	crisis_flag_is_shown

	### This = country
	## replace_scopes = { this = country }
	crisis_opinion_is_shown

	### Check if planets resources should be hidden
	### this: planet
	### root: country
	## replace_scopes = { this = planet root = country }
	should_hide_resources_for_planet

	# endregion
}
