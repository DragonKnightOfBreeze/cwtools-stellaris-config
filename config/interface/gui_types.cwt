types = {
	## type_key_filter = guiTypes
	type[gui_type] = {
		path = "game/interface"
		path_extension = .gui
		name_field = "" # anonymous
		severity = warning
	}
}

#GUI files under /interface have a unique structure. They are nestled within guiTypes = { }, within which there are different elements such as
#containerWindowType = { }, listBoxType = { }, scrollbarType = { } and so forth that nestle various different elements underneath them.
#Each one of these elements usually has a unique name or key identifier, but the problem is that
#you can have these elements nestled within other such like elements as well. For example, you can have containerwindowtype nestled within another
#containerwindowtype. This will require some work on Dayshine's part to figure out how to parse this. I also do not know what is optional
#and what is not optional. CWTools should warn users that removing vanilla elements alltogether will result in a CTD!
#see core.gui for a weird example.

# You should also know, that not all of this stuff is suitable for modding, as a lot of it has been designed to represent the data, received
# from the core game through some hardcoded way (like listboxes, grids and so on). -- Iyur

# TODO:
# [ ] All this stuff requires to sort out all parameters, properties, etc, to segregate them by their purpose
# [ ] To add description for some exotic stuff/parameters
# [ ] Refactor to use an alias for all the basic things that every gui element supports

enums = {
	enum[animationType] = {
		decelerated
		accelerated
		linear
	}
	# Position of elements
	enum[direction] = {
		#can be lower case as well! Vanilla has a mix of the two for no reason.
		UPPER_CENTER
	    UPPER_LEFT
	    UPPER_RIGHT
		CENTER
		CENTER_CENTER
		CENTER_UP
	    CENTER_DOWN
		CENTERUP
		CENTERED_LEFT
		CENTERED_RIGHT
		CENTERED_UP
		CENTERED_DOWN
		CENTER_LEFT
		CENTER_RIGHT
	    LOWER_LEFT
	    LOWER_RIGHT
		TOP
		TOP_LEFT
		TOP_RIGHT
		BOTTOM
		BOTTOM_LEFT
		BOTTOM_RIGHT
	    LEFT
		LEFT_UP
		LEFT_DOWN
	    RIGHT
	    RIGHT_UP
	    RIGHT_DOWN
	}
	enum[standard_format] = {
		center
		centre
		left
		right
	}
	enum[vertical_alignment] = {
		centre
		center
		top
		bottom
	}
	# Available actions
	enum[actionshortcut] = {
	    accept
	    cancel
	    delete
		focus_camera
		start
		reset
		track_on_map
		toggle_cloud_save
	}
	enum[gui_fade_type] = {
        smoothstep
		accelerated
		decelerated
		smoothstep
		linear
	}
	enum[gui_direction] = {
		top|left
		top|right
		top|hcenter
		bottom|left
		bottom|right
		bottom|hcenter
		center
		center|hcenter
		right
		right|vcenter
		left
		left|vcenter
		hcenter
		hcenter|vcenter
		vertical
		vcenter|hcenter
		vcenter|left
		vcenter|right
	}
	complex_enum[scrollbar_type] = {
		path = "game/interface"
		name = {
			scrollbarType = {
				name = enum_name
			}
		}
	}
	complex_enum[extended_scrollbar_type] = {
		path = "game/interface"
		name = {
			extendedScrollbarType = {
				name = enum_name
			}
		}
	}
}

gui_type = {
	alias_name[gui] = alias_match_left[gui]
	alias_name[gui_button] = alias_match_left[gui_button]
}

### Used to set a position of entire containers or elements
alias[gui:positionType] = {
	name = scalar
	### default: (0, 0)
	## cardinality = 0..1
	position = {
		x = int
		y = int
	}
	## cardinality = 0..1
	dynamic_extra_height = float
	## cardinality = 0..1
	dynamic_extra_height_max = float
	## cardinality = 0..1
	dynamic_extra_y = float

	## cardinality = 0..inf
	if_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
}

### Used to show in tooltip sections
alias[gui:textboxType] = {
	name = scalar
	## cardinality = 0..1
	textureFile = ""
	## file_extensions = { .png .dds .tga }
	## cardinality = 0..1
	textureFile = filepath

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
}

# Normal block for displaying text
alias[gui:instantTextboxType] = {
	name = scalar
	## cardinality = 0..1
	textureFile = ""
	## file_extensions = { .png .dds .tga }
	## cardinality = 0..1
	textureFile = filepath

	## cardinality = 0..1
	fixedSize = bool
	## cardinality = 0..1
	appendtext = scalar

	## cardinality = 0..1
	scrollbarType = enum[scrollbar_type]
	## cardinality = 0..1
	truncate = bool
	## cardinality = 0..1
	multiline = bool

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
}

# Text type area
alias[gui:editBoxType] = {
	name = scalar
	## cardinality = 0..1
	textureFile = ""
	## file_extensions = { .png .dds .tga }
	## cardinality = 0..1
	textureFile = filepath
	## cardinality = 0..1
	cursor = {
		x = int
		y = int
	}

	## cardinality = 0..1
	instantTextBoxType = bool
	## cardinality = 0..1
	max_characters = int
	## cardinality = 0..1
	allow_multi_line = bool
	## cardinality = 0..1
	defaultSelection = bool
	## cardinality = 0..1
	use_special_chars = bool
	## cardinality = 0..1
	limited_height = bool
	## cardinality = 0..1
	wrap_text = bool

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[overlay] = alias_match_left[overlay]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}

# Container for listed items, usually option entries in event/diplo windows.
alias[gui:smoothListboxType] = {
	name = scalar

	## cardinality = 0..1
	offset = {
		x = int
		y = int
	}
	## cardinality = 0..1
	scrollbarType = enum[scrollbar_type] #this is tied to instances defind as <scrollbarType> with a unique key.

	## cardinality = 0..inf
	if_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..1
	autohide_scrollbar = bool
	## cardinality = 0..1
	spacing = float
	## cardinality = 0..1
	priority = int
	## cardinality = 0..1
	wraparound = bool
	## cardinality = 0..1
	single_choice = bool
	## cardinality = 0..1
	alwaystransparent = bool

	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}

# General graphical block
alias[gui:containerWindowType] = {
	name = scalar

	## cardinality = 0..1
	upsound = click
	## cardinality = 0..1
	click_to_front = bool
	## cardinality = 0..inf
	if_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_animation] = alias_match_left[gui_animation]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_animation] = alias_match_left[gui_animation]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
	## cardinality = 0..1
	origo = enum[direction]
	## cardinality = 0..1
	clipping = bool
	## cardinality = 0..1
	respect_parent_boundaries = bool
	## cardinality = 0..1
	margin = {
		## cardinality = 0..1
		top = int
		## cardinality = 0..1
		bottom = int
		## cardinality = 0..1
		left = int
		## cardinality = 0..1
		right = int
	}
	## cardinality = 0..1
	verticalScrollbar = enum[extended_scrollbar_type]
	## cardinality = 0..1
	horizontalScrollbar = enum[extended_scrollbar_type]
	## cardinality = 0..1
	smooth_scrolling = bool
	## cardinality = 0..1
	dontRender = scalar
	## cardinality = 0..1
	horizontalBorder = scalar
	## cardinality = 0..1
	movable = bool
	## cardinality = 0..1
	fade_time = int
	## cardinality = 0..1
	fade_type = enum[gui_fade_type]

	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui] = alias_match_left[gui]
	alias_name[gui_button] = alias_match_left[gui_button]
	alias_name[gui_animation] = alias_match_left[gui_animation]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}

# Normal icon instance
alias[gui_button:iconType] = {
	name = scalar

	## cardinality = 0..1
	centerPosition = bool
	## cardinality = 0..1
	alwaystransparent = bool
	## cardinality = 0..1
	rotation = float
	## cardinality = 0..1
	scale = float
	## cardinality = 0..1
	mirror = bool
	## cardinality = 0..1
	frame = int

	## cardinality = 0..inf
	if_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_sprite] = alias_match_left[gui_sprite]
}

# Default game button. In some cases could be replaced by effectButtonType without CTD
alias[gui_button:buttonType] = {
	name = scalar

	## cardinality = 0..1
	hitbox_margin = {
	  x = int
	  y = int
	}

    ## cardinality = 0..1
	centerPosition = bool
	## cardinality = 0..inf
	if_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..1
	multiline = bool

	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_sprite] = alias_match_left[gui_sprite]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_button_element] = alias_match_left[gui_button_element]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
}

### Similar to default buttonType, but linked with specific events, described in button_effects.
alias[gui_button:effectButtonType] = {
	## cardinality = 0..1
	id = scalar
	name = scalar

	### The effect key is defined under /common/button_effects.
	effect = <button_effect>

	### Auto warp buttonText
	## cardinality = 0..1
	multiline = bool # 这是有效的（功能：自动换行）

	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_sprite] = alias_match_left[gui_sprite]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_button_element] = alias_match_left[gui_button_element]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
}

# Icon-like button ?
alias[gui_button:guiButtonType] = {
	name = scalar

	## cardinality = 0..1
	parent = <gui_type>
	## cardinality = 0..1
	parent = scalar #should be ->> alias[gui_button]

	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_sprite] = alias_match_left[gui_sprite]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_button_element] = alias_match_left[gui_button_element]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
}

alias[gui:browserType] = {
	name = scalar
	spriteType = <sprite>
	### default: (0, 0)
	## cardinality = 0..1
	position = {
		x = int
		y = int
	}
	size = {
		x = int
		y = int
	}
}

alias[gui:spinnerType] = {
	name = scalar

	leftbutton = scalar
	rightbutton = scalar

	## cardinality = 0..1
	maxValue = float
	## cardinality = 0..1
	startValue = float
	## cardinality = 0..1
	priority = float

	alias_name[gui_button] = alias_match_left[gui_button]
	alias_name[overlay] = alias_match_left[overlay]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
}

# Default scrollbar
alias[gui:scrollbarType] = {
	name = scalar

	slider = scalar
	track = scalar
	leftbutton = scalar
	rightbutton = scalar

	maxValue = float
	minValue = float
	stepSize = float
	startValue = float
	## cardinality = 0..1
	priority = int

	## cardinality = 0..1
	snappoint_center = scalar # gui_name
	## cardinality = 0..1
	snappoint = scalar # gui_name

	alias_name[gui_button] = alias_match_left[gui_button]
	alias_name[overlay] = alias_match_left[overlay]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
}

alias[gui:extendedScrollbarType] = {
	name = scalar

	startValue = int

	alias_name[gui_background] = alias_match_left[gui_background] #see the bottom of the file!
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]

	## cardinality = 0..1
	track = {
		name = scalar
		alias_name[gui_sprite] = alias_match_left[gui_sprite]
		### default: (0, 0)
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
	}
	## cardinality = 0..1
	slider = {
		name = scalar
		alias_name[gui_sprite] = alias_match_left[gui_sprite]
		### default: (0, 0)
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
	}
	## cardinality = 0..1
	decreaseButton = {
		name = scalar
		alias_name[gui_sprite] = alias_match_left[gui_sprite]
		### default: (0, 0)
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
	}
	## cardinality = 0..1
	increaseButton = {
		name = scalar
		alias_name[gui_sprite] = alias_match_left[gui_sprite]
		### default: (0, 0)
		## cardinality = 0..1
		position = {
			x = int
			y = int
		}
	}
}

alias[gui:checkboxType] = {
	name = scalar
	## cardinality = 0..1
	actionShortcut = enum[actionshortcut]

	alias_name[gui_sprite] = alias_match_left[gui_sprite]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}

alias[gui:OverlappingElementsBoxType] = {
	name = scalar

	## cardinality = 0..1
	spacing = float
	## cardinality = 0..1
	direction = enum[gui_direction]
	### default: no
	## cardinality = 0..1
	first_on_top = bool

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}
alias[gui:listBoxType] = {
	name = scalar

	## cardinality = 0..1
	priority = int
	## cardinality = 0..1
	spacing = float
	## cardinality = 0..1
	autohide_scrollbar = bool
	## cardinality = 0..1
	alwaystransparent = bool
	## cardinality = 0..1
	scrollbartype = enum[scrollbar_type]

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}

alias[gui:gridBoxType] = {
	name = scalar

	## cardinality = 0..1
	slotSize = {}
	## cardinality = 0..1
	slotSize = {
		width = int
		width = percentage_field
		height = int
		height = percentage_field
	}
	## cardinality = 0..1
	max_slots_horizontal = int
	## cardinality = 0..1
	max_slots_vertical = int
	## cardinality = 0..1
	resizeparent = bool
	## cardinality = 0..1
	add_horizontal = bool
	## cardinality = 0..1
	wraparound = bool

	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..1
	padding = {
		## cardinality = 0..1
		left = int
		## cardinality = 0..1
		top = int
		## cardinality = 0..1
		right = int
		## cardinality = 0..1
		bottom = int
	}
	## cardinality = 0..1
	scrollbarType = enum[scrollbar_type]

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
}
alias[gui:windowType] = {
	name = scalar

	## cardinality = 0..1
	dontRender = scalar
	## cardinality = 0..1
	horizontalBorder = scalar
	## cardinality = 0..1
	verticalBorder = scalar
	## cardinality = 0..1
	fullScreen = bool

	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui] = alias_match_left[gui]
	alias_name[gui_button] = alias_match_left[gui_button]
	alias_name[gui_navigation] = alias_match_left[gui_navigation]
	alias_name[gui_animation] = alias_match_left[gui_animation]
}
alias[gui:dropDownBoxType] = {
	name = scalar

	## cardinality = 0..1
	### Will remove elements outside of size bounding box
	clipping = bool

	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}

	## cardinality = 0..1
	expandButton = {
		name = scalar

		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_sprite] = alias_match_left[gui_sprite]
		alias_name[gui_localisation] = alias_match_left[gui_localisation]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
	## cardinality = 0..1
	expandedWindow = {
		name = scalar

		## cardinality = 0..1
		verticalScrollbar = scalar
		## cardinality = 0..1
		margin = {
			## cardinality = 0..1
			top = int
			## cardinality = 0..1
			bottom = int
			## cardinality = 0..1
			left = int
			## cardinality = 0..1
			right = int
		}
		## cardinality = 0..1
		click_to_front = bool

		## cardinality = 0..inf
		if_scaled_resolution = {
			alias_name[gui_size] = alias_match_left[gui_size]
			alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
			alias_name[gui_background] = alias_match_left[gui_background]
			alias_name[gui] = alias_match_left[gui]
			alias_name[gui_button] = alias_match_left[gui_button]
			alias_name[gui_sound] = alias_match_left[gui_sound]
		}

		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_animation] = alias_match_left[gui_animation]
		alias_name[gui_navigation] = alias_match_left[gui_navigation]
	}
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	alias_name[gui_background] = alias_match_left[gui_background]
	alias_name[gui] = alias_match_left[gui]
	alias_name[gui_button] = alias_match_left[gui_button]
}

alias[overlay:overlay] = {
	name = scalar
	## cardinality = 0..1
	spriteType = <sprite>
	## cardinality = 0..1
	overSprite = <sprite>
	### default: (0, 0)
	## cardinality = 0..1
	position = {
		x = int
		y = int
	}
	## cardinality = 0..1
	size = {
		x = int
		y = int
	}
}
alias[gui_standard_element:size] = {}
alias[gui_standard_element:size] = {
	x = int
	x = percentage_field
	y = int
	y = percentage_field
}
alias[gui_standard_element:size] = {
	width = int
	width = percentage_field
	## cardinality = 0..1
	height = int
	## cardinality = 0..1
	height = percentage_field
}

alias[gui_standard_element:position] = {
	x = float
	y = float
}

alias[gui_standard_element:dynamic_extra_height] = float
alias[gui_standard_element:dynamic_extra_height_max] = float
alias[gui_standard_element:dynamic_extra_y] = float

alias[gui_standard_element:borderSize] = {
	x = int
	y = int
}

alias[gui_standard_element:orientation] = enum[direction]
alias[gui_standard_element:format] = enum[direction]
alias[gui_standard_element:format] = enum[standard_format]
alias[gui_standard_element:vertical_alignment] = enum[vertical_alignment]
alias[gui_standard_element:id] = scalar
alias[gui_standard_element:horizontal] = int[0..1]
alias[gui_standard_element:horizontal] = bool
alias[gui_standard_element:maxWidth] = int
alias[gui_standard_element:maxHeight] = int
alias[gui_standard_element:defaultSelection] = bool
alias[gui_standard_element:scale] = float
alias[gui_standard_element:alwaysTransparent] = bool
## default: yes
alias[gui_standard_element:moveable] = bool
alias[gui_standard_element:moveable] = 0
alias[gui_standard_element:hide] = bool

alias[gui_sprite:spriteType] = <sprite>
alias[gui_sprite:spriteType] = <progressbar>
alias[gui_sprite:spriteType] = <piechart>
alias[gui_sprite:quadTextureSprite] = <sprite>
alias[gui_sprite:quadTextureSprite] = <progressbar>
alias[gui_sprite:quadTextureSprite] = <piechart>
alias[gui_sprite:frame] = int

### Position before animation in pixels
alias[gui_animation:show_position] = {
	x = int
	x = float
	x = percentage_field
	y = int
	y = float
	y = percentage_field
}
### Position returned to when hiding
alias[gui_animation:hide_position] = {
	x = int
	x = float
	x = percentage_field
	y = int
	y = float
	y = percentage_field
}
alias[gui_animation:show_animation_type] = enum[animationType]
alias[gui_animation:hide_animation_type] = enum[animationType]
alias[gui_animation:animation_type] = enum[animationType]
alias[gui_animation:animation_time] = float
alias[gui_animation:fade_time] = float
alias[gui_animation:fade_type] = linear

alias[gui_sound:clicksound] = <sound_effect>
alias[gui_sound:oversound] = <sound_effect>
alias[gui_sound:show_sound] = <sound_effect>
alias[gui_sound:up_sound] = <sound_effect>
alias[gui_sound:no_clicksound] = bool

alias[gui_localisation:tooltip_mode_enabled] = bool
alias[gui_localisation:font] = <bitmapfont>
alias[gui_localisation:text] = scalar #since many are not defined anyway but are hardcoded.
alias[gui_localisation:text_color_code] = <text_color>
alias[gui_localisation:tooltip] = ""
alias[gui_localisation:tooltip] = localisation
alias[gui_localisation:tooltipText] = ""
alias[gui_localisation:tooltipText] = localisation
alias[gui_localisation:delayedTooltipText] = ""
alias[gui_localisation:delayedTooltipText] = localisation
alias[gui_localisation:pdx_tooltip] = scalar #since many are not defined anyway but are hardcoded.
alias[gui_localisation:pdx_tooltip_delayed] = localisation
alias[gui_localisation:pdx_tooltip_anchor_orientation] = enum[direction]
alias[gui_localisation:pdx_tooltip_anchor_offset] = { x = int y = int }
### default: no
alias[gui_localisation:concepts_show_missing_dlc] = bool
alias[gui_button_element:shortcut] = scalar
alias[gui_button_element:frame] = int
alias[gui_button_element:buttonText] = scalar #since many are not defined anyway but are hardcoded.
alias[gui_button_element:buttonFont] = <bitmapfont>
alias[gui_button_element:actionShortcut] = enum[actionshortcut]
alias[gui_button_element:web_link] = scalar
alias[gui_button_element:text_offset] = { x = int y = int }
alias[gui_button_element:parent] = scalar

alias[gui_navigation:navUp] = scalar
alias[gui_navigation:navDown] = scalar
alias[gui_navigation:navLeft] = scalar
alias[gui_navigation:navRight] = scalar

alias[gui_background:background] = ""
alias[gui_background:background] = background
alias[gui_background:background] = <sprite>
alias[gui_background:background] = {
	name = scalar
	alias_name[gui_sprite] = alias_match_left[gui_sprite]
	alias_name[gui_sound] = alias_match_left[gui_sound]
	alias_name[gui_localisation] = alias_match_left[gui_localisation]
	alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
	## cardinality = 0..inf
	if_scaled_resolution = {
		alias_name[gui_size] = alias_match_left[gui_size]
		alias_name[gui_standard_element] = alias_match_left[gui_standard_element]
		alias_name[gui_background] = alias_match_left[gui_background]
		alias_name[gui] = alias_match_left[gui]
		alias_name[gui_button] = alias_match_left[gui_button]
		alias_name[gui_sound] = alias_match_left[gui_sound]
	}
}

alias[gui_size:min_height] = int
alias[gui_size:max_height] = int
alias[gui_size:min_width] = int
alias[gui_size:max_width] = int
